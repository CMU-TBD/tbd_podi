amcl:
  min_particles: 100        # [default: 100] minimum allowed number of particles
  max_particles: 5000       # [default: 5000] maximum allowed number of particles

  kld_err: 0.01             # [default: 0.01] maximum error between the true distribution and the estimated distribution
  kld_z: 0.99               # [default: 0.99] upper standard normal quantile for (1 - p), where p is the probability that the error on the estimated distribution will be less than kld_err

  update_min_d: 0.2         # [default: 0.2 meters] translational movement required before performing a filter update
  update_min_a: 0.5236        # [default: pi/6 radians] rotational movement required before performing a filter update
  resample_interval: 3      # [default: 3] number of filter updates required before resampling

  transform_tolerance: 0.1  # [default: 0.1 seconds] time with which to post-date the transform that is published, to indicate that this transform is valid into the future

  recovery_alpha_slow: 0    # [default: 0.0 (disabled)] exponential decay rate for the slow average weight filter, used in deciding when to recover by adding random poses. A good value might be 0.001
  recovery_alpha_fast: 0    # [default: 0.0 (disabled)] exponential decay rate for the fast average weight filter, used in deciding when to recover by adding random poses. A good value might be 0.1

  initial_cov_xx: 0.25       # [default: 0.5*0.5 meters] initial pose covariance (x*x), used to initialize filter with Gaussian distribution
  initial_cov_yy: 0.25       # [default: 0.5*0.5 meters] initial pose covariance (y*y), used to initialize filter with Gaussian distribution
  initial_cov_aa: 0.0685       # [default: (pi/12)*(pi/12) rad] initial pose covariance (yaw*yaw), used to initialize filter with Gaussian distribution

  laser_max_beams: 30       # [default: 30] how many evenly-spaced beams in each scan to be used when updating the filter
  laser_z_hit: 0.95         # [default: 0.95] mixture weight for the z_hit part of the model
  laser_z_rand: 0.05        # [default: 0.05] mixture weight for the z_rand part of the model
  laser_sigma_hit: 0.2      # [default: 0.2 meters] standard deviation for Gaussian model used in z_hit part of the model
  laser_likelihood_max_dist: 2.0 # [default: 2.0 meters] maximum distance to do obstacle inflation on map, for use in likelihood_field model

  odom_alpha1: 0.2           # [default: 0.2] specifies the expected noise in odometry's rotation estimate from the rotational component of the robot's motion
  odom_alpha2: 0.2           # [default: 0.2] specifies the expected noise in odometry's rotation estimate from translational component of the robot's motion
  odom_alpha3: 0.2           # [default: 0.2] specifies the expected noise in odometry's translation estimate from the translational component of the robot's motion
  odom_alpha4: 0.2           # [default: 0.2] specifies the expected noise in odometry's translation estimate from the rotational component of the robot's motion
  odom_alpha5: 0.2           # [default: 0.2] translation-related noise parameter (only used if model is "omni")

uwb:
  position_filter_strength: 5 # integer from 0 to 15, w/ 15 = more filtering
  pose_cov: [1e-4, 1e-4, 1e-4, 1e-4, 1e-4, 1e-4] # estimates of variance for (x, y, z, r, p, yaw)
  ang_cov: [1e-4, 1e-4, 1e-4] # estimates of variance for (r_dot, p_dot, yaw_dot)
  accel_cov: [1e-4, 1e-4, 1e-4] # estimates of variance for (x_acc, y_acc, z_acc)

odom:
  vel_cov: [1e-4, 1e-4] # estimates of variance for x_vel, yaw_vel

localization_base:
  frequency: 40                       # [default: 30] the real valued frequency, in Hz, at which the filter produces a state estimate
  sensor_timeout: .1                 # [default: 0.033333333] the real-valued period, in seconds, after which we consider any sensor to have timed out; inverse of minimum frequency
  transform_time_offset: 0.05            # [default: 0] future-dates transform timestamps by this amount
  transform_timeout: 0.05                # [default: 0] how long to wait if a transformation is not available yet

  history_length: 0.25                # [default: 0s] if True and smooth_lagged_data is True, specifies the number of seconds for which the filter retains state and measurement history

  process_noise_covariance: [0.05, 0,   0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0,
                            0,    0.05, 0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0,
                            0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0,
                            0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0,
                            0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0,
                            0,    0,    0,    0,    0,    0.06, 0,     0,     0,    0,    0,    0,    0,    0,    0,
                            0,    0,    0,    0,    0,    0,    0.025, 0,     0,    0,    0,    0,    0,    0,    0,
                            0,    0,    0,    0,    0,    0,    0,     0.025, 0,    0,    0,    0,    0,    0,    0,
                            0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0,
                            0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0,
                            0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0,
                            0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0.02, 0,    0,    0,
                            0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0.01, 0,    0,
                            0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0.01, 0,
                            0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0]
  # [default: diag(0.05, 0.05, 0.06, 0.03, 0.03, 0.06, 0.025, 0.025, 0.04, 0.01, 0.01, 0.02, 0.01, 0.01, 0.015)]
  # the process noise covariance (Q)

  initial_estimate_covariance: [1e-9, 0,    0,    0,    0,    0,    0,    0,    0,    0,     0,     0,     0,    0,    0,
                                0,    1e-9, 0,    0,    0,    0,    0,    0,    0,    0,     0,     0,     0,    0,    0,
                                0,    0,    0,    0,    0,    0,    0,    0,    0,    0,     0,     0,     0,    0,    0,
                                0,    0,    0,    0,    0,    0,    0,    0,    0,    0,     0,     0,     0,    0,    0,
                                0,    0,    0,    0,    0,    0,    0,    0,    0,    0,     0,     0,     0,    0,    0,
                                0,    0,    0,    0,    0,    1e-9, 0,    0,    0,    0,     0,     0,     0,    0,    0,
                                0,    0,    0,    0,    0,    0,    1e-9, 0,    0,    0,     0,     0,     0,    0,    0,
                                0,    0,    0,    0,    0,    0,    0,    1e-9, 0,    0,     0,     0,     0,    0,    0,
                                0,    0,    0,    0,    0,    0,    0,    0,    0,    0,     0,     0,     0,    0,    0,
                                0,    0,    0,    0,    0,    0,    0,    0,    0,    0,     0,     0,     0,    0,    0,
                                0,    0,    0,    0,    0,    0,    0,    0,    0,    0,     0,     0,     0,    0,    0,
                                0,    0,    0,    0,    0,    0,    0,    0,    0,    0,     0,     1e-9,  0,    0,    0,
                                0,    0,    0,    0,    0,    0,    0,    0,    0,    0,     0,     0,     1e-9, 0,    0,
                                0,    0,    0,    0,    0,    0,    0,    0,    0,    0,     0,     0,     0,    1e-9, 0,
                                0,    0,    0,    0,    0,    0,    0,    0,    0,    0,     0,     0,     0,    0,    0]
  # [default: diag(15x[1e-9])]
  # error in initial state estimate (P)

  # sensors

  # Odom output
  odom0_queue_size: 10                            # [default: 1] callback queue size; filter can incorporate all measurements if sensor frequency higher than EKF node
  odom0_pose_rejection_threshold: 0.5             # [default: numeric_limits<double>::max()] distance (Mahalanobis) at which outlier data is rejected
  odom0_twist_rejection_threshold: 1.0            # [default: numeric_limits<double>::max()] distance (Mahalanobis) at which outlier data is rejected

  # IMU output
  imu0_queue_size: 10                               # [default: 1] callback queue size; filter can incorporate all measurements if sensor frequency higher than EKF node
  imu0_pose_rejection_threshold: 0.5                # [default: numeric_limits<double>::max()] distance (Mahalanobis) at which outlier data is rejected
  imu0_angular_velocity_rejection_threshold: 1.0    # [default: numeric_limits<double>::max()] distance (Mahalanobis) at which outlier data is rejected
  imu0_linear_acceleration_rejection_threshold: 1.5 # [default: numeric_limits<double>::max()] distance (Mahalanobis) at which outlier data is rejected

localization_odom:
  frequency: 40                       # [default: 30] the real valued frequency, in Hz, at which the filter produces a state estimate
  sensor_timeout: .1                 # [default: 0.033333333] the real-valued period, in seconds, after which we consider any sensor to have timed out; inverse of minimum frequency
  transform_time_offset: 0.05            # [default: 0] future-dates transform timestamps by this amount
  transform_timeout: 0.05                # [default: 0] how long to wait if a transformation is not available yet

  history_length: 0.25                # [default: 0s] if True and smooth_lagged_data is True, specifies the number of seconds for which the filter retains state and measurement history

  process_noise_covariance: [0.05, 0,   0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0,
                            0,    0.05, 0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0,
                            0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0,
                            0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0,
                            0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0,
                            0,    0,    0,    0,    0,    0.06, 0,     0,     0,    0,    0,    0,    0,    0,    0,
                            0,    0,    0,    0,    0,    0,    0.025, 0,     0,    0,    0,    0,    0,    0,    0,
                            0,    0,    0,    0,    0,    0,    0,     0.025, 0,    0,    0,    0,    0,    0,    0,
                            0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0,
                            0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0,
                            0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0,
                            0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0.02, 0,    0,    0,
                            0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0.01, 0,    0,
                            0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0.01, 0,
                            0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0]
  # [default: diag(0.05, 0.05, 0.06, 0.03, 0.03, 0.06, 0.025, 0.025, 0.04, 0.01, 0.01, 0.02, 0.01, 0.01, 0.015)]
  # the process noise covariance (Q)

  initial_estimate_covariance: [1e-9, 0,    0,    0,    0,    0,    0,    0,    0,    0,     0,     0,     0,    0,    0,
                                0,    1e-9, 0,    0,    0,    0,    0,    0,    0,    0,     0,     0,     0,    0,    0,
                                0,    0,    0,    0,    0,    0,    0,    0,    0,    0,     0,     0,     0,    0,    0,
                                0,    0,    0,    0,    0,    0,    0,    0,    0,    0,     0,     0,     0,    0,    0,
                                0,    0,    0,    0,    0,    0,    0,    0,    0,    0,     0,     0,     0,    0,    0,
                                0,    0,    0,    0,    0,    1e-9, 0,    0,    0,    0,     0,     0,     0,    0,    0,
                                0,    0,    0,    0,    0,    0,    1e-9, 0,    0,    0,     0,     0,     0,    0,    0,
                                0,    0,    0,    0,    0,    0,    0,    1e-9, 0,    0,     0,     0,     0,    0,    0,
                                0,    0,    0,    0,    0,    0,    0,    0,    0,    0,     0,     0,     0,    0,    0,
                                0,    0,    0,    0,    0,    0,    0,    0,    0,    0,     0,     0,     0,    0,    0,
                                0,    0,    0,    0,    0,    0,    0,    0,    0,    0,     0,     0,     0,    0,    0,
                                0,    0,    0,    0,    0,    0,    0,    0,    0,    0,     0,     1e-9,  0,    0,    0,
                                0,    0,    0,    0,    0,    0,    0,    0,    0,    0,     0,     0,     1e-9, 0,    0,
                                0,    0,    0,    0,    0,    0,    0,    0,    0,    0,     0,     0,     0,    1e-9, 0,
                                0,    0,    0,    0,    0,    0,    0,    0,    0,    0,     0,     0,     0,    0,    0]
  # [default: diag(15x[1e-9])]
  # error in initial state estimate (P)

  # sensors
  # odom output
  odom0_queue_size: 10                            # [default: 1] callback queue size; filter can incorporate all measurements if sensor frequency higher than EKF node
  odom0_pose_rejection_threshold: 0.5             # [default: numeric_limits<double>::max()] distance (Mahalanobis) at which outlier data is rejected
  odom0_twist_rejection_threshold: 1.0            # [default: numeric_limits<double>::max()] distance (Mahalanobis) at which outlier data is rejected

  # AMCL Pose
  pose0_queue_size: 10                            # [default: 1] callback queue size; filter can incorporate all measurements if sensor frequency higher than EKF node
  pose0_rejection_threshold: 0.5                  # [default: numeric_limits<double>::max()] distance (Mahalanobis) at which outlier data is rejected

  # UWB Pose
  pose1_queue_size: 10                            # [default: 1] callback queue size; filter can incorporate all measurements if sensor frequency higher than EKF node
  pose1_rejection_threshold: 0.09                  # [default: numeric_limits<double>::max()] distance (Mahalanobis) at which outlier data is rejected

  # IMU output
  imu0_queue_size: 10                               # [default: 1] callback queue size; filter can incorporate all measurements if sensor frequency higher than EKF node
  imu0_pose_rejection_threshold: 1.0                # [default: numeric_limits<double>::max()] distance (Mahalanobis) at which outlier data is rejected
  imu0_angular_velocity_rejection_threshold: 2.0    # [default: numeric_limits<double>::max()] distance (Mahalanobis) at which outlier data is rejected
  imu0_linear_acceleration_rejection_threshold: 3.0 # [default: numeric_limits<double>::max()] distance (Mahalanobis) at which outlier data is rejected