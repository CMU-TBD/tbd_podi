<launch>

	<arg name="rosariaPort" default="/dev/ttyUSB0"/>
	<arg name="rosariaPublishLasers" default="true"/>
	<arg name="joystickDevicePath" default="/dev/input/js0"/>
	<arg name="rosbagRecordingBasePath" default="/home/lab/Dev/ros_ws/src/tbd_podi_common/bagfiles/"/>
	<arg name="playbackRosbagPath" default=""/>
	<arg name="targetX" default="0.0"/>
	<arg name="targetY" default="0.0"/>
	<arg name="targetTh" default="0.0"/>

	<!-- Launch ROSARIA, which communicates with the P3DX Base -->
	<node pkg = "rosaria" type = "RosAria" name = "RosAria">
		<param name="port" value="$(arg rosariaPort)" type="string"/>
		<param name="publish_aria_lasers" value="$(arg rosariaPublishLasers)" type="bool"/>
	</node>

	<!-- Launch the joystick node -->
	<node pkg="joy" type="joy_node" name="joystick_node" respawn="true">
    <param name="dev" value="$(arg joystickDevicePath)" type="string"/>
  </node>

	<!-- Launch the node that will send velocity commands to ROSARIA -->
	<node pkg="tbd_podi_common" type="control_robot" name="control_robot" output="screen">
		<param name="rosbagRecordingBasePath" value="$(arg rosbagRecordingBasePath)" type="string"/>
		<param name="playbackRosbagPath" value="$(arg playbackRosbagPath)"/>
		<param name="targetX" value="$(arg targetX)"/>
		<param name="targetY" value="$(arg targetY)"/>
		<param name="targetTh" value="$(arg targetTh)"/>
		<param name="control_loop_rate" value="100.0"/>
		<param name="proportionalGainFactor" value="0.90"/>
	</node>

	<!-- Launch the nodes that appropaitely transform the laser scanner and crop its readings -->
	<node pkg="tbd_podi_common" type="tf_broadcaster" name="podi_tf_broadcaster" output="screen"/>
  <node pkg="tbd_podi_common" type="laser_scan_frame_transform" name="podi_laser_scan_frame_transform" output="screen"/>

	<!-- Start the P3DX's URDF broadcaster, so the appropriate TF tree is published -->
	<arg name="urdf" default="$(find amr_robots_description)/urdf/pioneer3dx.urdf"/>
  <arg name="gui" default="False" />
  <param name="robot_description" textfile="$(arg urdf)" />
  <param name="use_gui" value="$(arg gui)"/>
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" ></node>
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="state_publisher" />

	<!-- Publish the NSH A map and start RVIZ -->
	<node name="map_server" pkg="map_server" type="map_server" args="$(find tbd_podi_common)/maps/nshA.yaml" output="screen"/>
	<node name="rviz" pkg="rviz" type="rviz" args="-d $(find tbd_podi_common)/rviz/podi_default.rviz" />

	<!-- Start AMCL for Localization -->
	<!--- Run AMCL -->
	<node pkg="amcl" type="amcl" name="amcl" output="screen" args="scan:=/laser">n
		<!--Minimum allowed number of particles. -->
		<param name="min_particles" value="100"/>
		<!--Maximum allowed number of particles. -->
		<param name="max_particles" value="5000"/>

		<!--Translational movement required before performing a filter update.-->
		<param name="update_min_d" value="0.1"/>
		<!--Rotational movement required before performing a filter update. -->
		<param name="update_min_a" value="0.15"/>
		<!--Number of filter updates required before resampling. -->
		<param name="resample_interval" value="2"/>
		<!--Number of filter updates required before resampling. -->
		<param name="transform_tolerance" value="0.1" />

		<!--Initial pose covariance (x*x), used to initialize filter with Gaussian distribution. -->
		<param name="initial_cov_xx" value="0.02"/>
		<!--Initial pose covariance (y*y), used to initialize filter with Gaussian distribution. -->
		<param name="initial_cov_yy" value="0.02"/>
		<!--Initial pose covariance (yaw*yaw), used to initialize filter with Gaussian distribution. -->
		<param name="initial_cov_aa" value="0.02"/>
		<!--When set to true, AMCL will subscribe to the map topic rather than making a service call to receive its map. New in navigation XXXX-->
		<param name="use_map_topic" value="false"/>


		<!--Laser model parameters-->
		<param name="laser_model_type" value="likelihood_field"/>
		<!--How many evenly-spaced beams in each scan to be used when updating the filter. -->
		<param name="laser_max_beams" value="200"/>
		<!--Mixture weight for the z_hit part of the model. -->
		<param name="laser_z_hit" value="0.95"/>
		<!--Mixture weight for the z_rand part of the model. -->
		<param name="laser_z_rand" value="0.05"/>
		<!--Standard deviation for Gaussian model used in z_hit part of the model. -->
		<param name="laser_sigma_hit" value="0.1"/>
		<!-- Maximum distance to do obstacle inflation on map, for use in likelihood_field model. -->
		<param name="laser_likelihood_max_dist" value="0.5"/>

		<!-- Odometery model parameters -->
		<!--Which model to use, either "diff" or "omni". -->
		<param name="odom_model_type" value="diff-corrected"/>
		<!-- Noise in odometry is rotation estimate from the rotational component of the robot is motion-->
		<param name="odom_alpha1" value="0.005"/>
		<!-- Noise in odometry is rotation estimate from translational component of the robotis  motion-->
		<param name="odom_alpha2" value="0.005"/>
		<!-- Noise in odometry is translation estimate from the translational component of the robot is motion-->
		<param name="odom_alpha3" value="0.010"/>
		<!-- Noise in odometry is translation estimate from the rotational component of the robot is motion-->
		<param name="odom_alpha4" value="0.005"/>

	</node>

</launch>
